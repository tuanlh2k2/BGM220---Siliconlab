/*
 * app_cli.h
 *
 *  Created on: Aug 21, 2023
 *      Author: Wind
 */

#ifndef APP_CLI_H_
#define APP_CLI_H_



#endif /* APP_CLI_H_ */

#include <stdint.h>
#include "sl_component_catalog.h"
#include "em_chip.h"
#include "sl_cli.h"

#if defined(SL_CATALOG_KERNEL_PRESENT)
#include "app_task_init.h"
#endif
#include "sl_cli_handles.h"

/******************************************************************************
 * CLI - run: Handler of the `custom run` command
 *****************************************************************************/
void cmd_run_handler(sl_cli_command_arg_t *arguments)
{
  int argc = sl_cli_get_argument_count(arguments);

  if (argc < 1) {
    printf("Not enough arguments. Expected 1! \n");
    return;
  }

  uint8_t enable = sl_cli_get_argument_uint8(arguments, 0);
  if (enable) {
    printf("To run \n");
  } else {
    printf("To stop \n");
  }
}

/******************************************************************************
 * CLI - test: Handler of the `custom test` command
 *****************************************************************************/
void cmd_custom_test_handler(sl_cli_command_arg_t *arguments)
{
  int argc = sl_cli_get_argument_count(arguments);

  if (argc < 1) {
    printf("Not enough arguments. Expected 1! \n");
    return;
  }

  printf("user input=[%s] \n", sl_cli_get_argument_string(arguments, 0));
}

static const sl_cli_command_info_t custom_cmd_test = \
  SL_CLI_COMMAND(cmd_custom_test_handler,
                 "Custom test command",
                 "Input any string as the parameter",
                 { SL_CLI_ARG_STRING, SL_CLI_ARG_END, });

static sl_cli_command_entry_t custom_menu_entry[] = {
  { "test", &custom_cmd_test, false },
  { NULL, NULL, false },
};

static const sl_cli_command_info_t cmd_run = \
  SL_CLI_COMMAND(cmd_run_handler,
                 "Run command",
                 "Argument 0:stop, 1:run",
                 { SL_CLI_ARG_UINT8, SL_CLI_ARG_END, });

static sl_cli_command_entry_t custom_cmd_table[] = {
  { "run", &cmd_run, false },
  { NULL, NULL, false },
};

static sl_cli_command_group_t custom_cmd_group = {
  { NULL },
  false,
  custom_cmd_table
};

void cli_custom_cmd_init()
{
  sl_cli_command_add_command_group(sl_cli_example_handle, &custom_cmd_group);
}
