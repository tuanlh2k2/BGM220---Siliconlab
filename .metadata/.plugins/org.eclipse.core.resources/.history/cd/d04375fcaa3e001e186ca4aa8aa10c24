/***************************************************************************//**
 * @file
 * @brief Core application logic.
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 ******************************************************************************/
#include "em_common.h"
#include "app_assert.h"
#include "sl_bluetooth.h"
#include "sl_simple_timer.h"
#include "sl_simple_button_instances.h"
#include "sl_simple_led_instances.h"
#include "gatt_db.h"
#include "app_log.h"
#include "dht11.h"
#include "bh1750.h"
#include "ring_buffer.h"
#include "stdbool.h"
#include "app.h"

// Connection handle.
static uint8_t app_connection = 0;
// The advertising set handle allocated from Bluetooth stack.
static uint8_t advertising_set_handle = 0xff;
// Periodic timer handle.
static sl_simple_timer_t app_periodic_timer;
// Periodic timer callback.
static void app_periodic_timer_cb(sl_simple_timer_t *timer, void *data);
// flag of sensor.
static bool flag_of_sensor = false;

uint8_t integer_humi_value, decimal_humi_value, integer_temp_value, decimal_temp_value, data_light[2];

// init ring buffer.
static ring_buffer_types queue;

#define 	DATA_TRANSMISSION  0  // trạng thái gửi dữ liệu
#define 	PENDING_TRANSMISSION 1 // trạng thái chờ truyền dữ liệu.

volatile uint8_t status_of_device = DATA_TRANSMISSION; // đầu tiên ở trạng thái chờ dữ liệu.

/**************************************************************************//**
 * Application Init.
 *****************************************************************************/
SL_WEAK void app_init(void)
{
	bh1750_i2c_init();
	queue.front = 0;
	queue.rear = 0;
	sl_bt_system_set_lazy_soft_timer(32768 * 6, 0, 0, 0);
	sl_bt_system_set_lazy_soft_timer(32768 / 3, 0, 1, 0);
}

/**************************************************************************//**
 * Application Process Action.
 *****************************************************************************/
SL_WEAK void app_process_action(void)
{
	if (flag_of_sensor == true) {
		flag_of_sensor = false;
		dht11_status_t sc1;
		sc1 = readDataDHT11(&integer_humi_value, &decimal_humi_value, &integer_temp_value, &decimal_temp_value);
		//sc1 = 1;
		bh1750_status_t sc2;
		sc2 = bh1750_i2c_read(CMD_H_RES_MODE ,&data_light);

		if (sc1 & sc2 == 1) {
			status_ring_buffer status_ring_buffer;
			uint8_t data[6] = {integer_humi_value, decimal_humi_value, integer_temp_value, decimal_temp_value, data_light[0], data_light[1]};
			status_ring_buffer = ring_buffer_push_data(&queue, &data);
		}
	}
}

/**************************************************************************//**
 * Bluetooth stack event handler.
 * This overrides the dummy weak implementation.
 *
 * @param[in] evt Event coming from the Bluetooth stack.
 *****************************************************************************/
void sl_bt_on_event(sl_bt_msg_t *evt)
{
	sl_status_t sc;
	bd_addr address;
	uint8_t address_type;
	uint8_t system_id[8];

	switch (SL_BT_MSG_ID(evt->header)) {
	case sl_bt_evt_system_soft_timer_id:
		if (evt->data.evt_system_soft_timer.handle == 0) {
			flag_of_sensor = true;
		}
		if (evt->data.evt_system_soft_timer.handle == 1) {
			app_log("status_of_device = %x - %d\n", &status_of_device, status_of_device);
			if ((status_of_device & 0x1) == DATA_TRANSMISSION) {
				sl_led_toggle(&sl_led_led0);
			}
		}

		break;
		// -------------------------------
		// This event indicates the device has started and the radio is ready.
		// Do not call any stack command before receiving this boot event!
	case sl_bt_evt_system_boot_id:

		// Extract unique ID from BT Address.
		sc = sl_bt_system_get_identity_address(&address, &address_type);
		app_assert_status(sc);

		// Pad and reverse unique ID to get System ID.
		system_id[0] = address.addr[5];
		system_id[1] = address.addr[4];
		system_id[2] = address.addr[3];
		system_id[3] = 0xFF;
		system_id[4] = 0xFE;
		system_id[5] = address.addr[2];
		system_id[6] = address.addr[1];
		system_id[7] = address.addr[0];

		sc = sl_bt_gatt_server_write_attribute_value(gattdb_system_id,
				0,
				sizeof(system_id),
				system_id);
		app_assert_status(sc);

		// Create an advertising set.
		sc = sl_bt_advertiser_create_set(&advertising_set_handle);
		app_assert_status(sc);

		// Set advertising interval to 100ms.
		sc = sl_bt_advertiser_set_timing(
				advertising_set_handle,
				160, // min. adv. interval (milliseconds * 1.6)
				160, // max. adv. interval (milliseconds * 1.6)
				0,   // adv. duration
				0);  // max. num. adv. events
		app_assert_status(sc);
		// Start general advertising and enable connections.
		sc = sl_bt_advertiser_start(
				advertising_set_handle,
				sl_bt_advertiser_general_discoverable,
				sl_bt_advertiser_connectable_scannable);
		app_assert_status(sc);
		break;

		// -------------------------------
		// This event indicates that a new connection was opened.
	case sl_bt_evt_connection_opened_id:
		app_connection = evt->data.evt_connection_opened.connection;
		sc = sl_simple_timer_start(&app_periodic_timer,
				5000,
				app_periodic_timer_cb,
				NULL,
				true);
		app_assert_status(sc);
		// Send first indication.
		app_periodic_timer_cb(&app_periodic_timer, NULL);
		break;

		// -------------------------------
		// This event indicates that a connection was closed.
	case sl_bt_evt_connection_closed_id:
		// Restart advertising after client has disconnected.
		sc = sl_bt_advertiser_start(
				advertising_set_handle,
				sl_bt_advertiser_general_discoverable,
				sl_bt_advertiser_connectable_scannable);
		app_assert_status(sc);
		break;
	case sl_bt_evt_gatt_server_characteristic_status_id:

		break;
	case sl_bt_evt_gatt_server_attribute_value_id:
		// The value of the gattdb_led_control characteristic was changed.
		if (gattdb_button_characteristic == evt->data.evt_gatt_server_characteristic_status.characteristic) {
			//uint8_t size = evt->data.evt_gatt_server_attribute_value.value.len;
			uint8_t data = evt->data.evt_gatt_server_attribute_value.value.data[0];

			// Xử lý sau khi nhận nút bấm từ Gateway.
			app_log("da nhan duoc tin hieu nut nhan - data :%d\n", data);
			if(data) {
				status_of_device =  DATA_TRANSMISSION;
			} else {
				sl_led_turn_off(&sl_led_led0);
				status_of_device = PENDING_TRANSMISSION;
			}

			if (status_of_device == PENDING_TRANSMISSION) {
				sl_simple_timer_stop(&app_periodic_timer);
			} else {
				sc = sl_simple_timer_start(&app_periodic_timer,
						5000,
						app_periodic_timer_cb,
						NULL,
						true);
				app_assert_status(sc);
				// Send first indication.
				app_periodic_timer_cb(&app_periodic_timer, NULL);
			}
		}
		break;

		// -------------------------------
		// Default event handler.
	default:
		break;
	}
}


/**************************************************************************//**
 * Timer callback
 *****************************************************************************/
static void app_periodic_timer_cb(sl_simple_timer_t *timer, void *data)
{
	(void)data;
	(void)timer;
	sl_status_t sc;
	//uint8_t *data_s;
	uint8_t data_s[6];
	data_s = ring_buffer_pop_data(&queue);
	app_log("%x\n", data_s);
	if (data_s == NULL) {
		app_log("NULL\n");
	} else {
		sc = sl_bt_gatt_server_send_indication(app_connection, gattdb_sensor_characteristic, 6, data_s);
		if (sc) {
			app_log_warning("Failed to send temperature measurement indication\n");
		}
	}
}
