/*
 * app_cli.c
 *
 *  Created on: Aug 21, 2023
 *      Author: Wind
 */


#include "sl_cli.h"

// Create the command group at the top level
static sl_cli_command_group_t a_group_0 = {
  { NULL },
  false,
  a_table
};

// Create the array of commands, containing three elements in this example
static sl_cli_command_entry_t a_table[] = {
  { "echo_str", &cmd__echostr, false },
  { "echo_int", &cmd__echoint, false },
  { "echo_intstr",  &cmd__echointstr, false },
  { NULL, NULL, false },
};

// Create command details for the commands. The macro SL_CLI_UNIT_SEPARATOR can be
// used to format the help text for multiple arguments.
static const sl_cli_command_info_t cmd__echostr = \
  SL_CLI_COMMAND(echo_str,
                 "echoes string arguments to the output",
                 "Just a string...",
                 {SL_CLI_ARG_WILDCARD, SL_CLI_ARG_END, });

static const sl_cli_command_info_t cmd__echoint = \
  SL_CLI_COMMAND(echo_int,
                 "echoes integer arguments to the output",
                 "Just a number...",
                 {SL_CLI_ARG_INT8, SL_CLI_ARG_ADDITIONAL, SL_CLI_ARG_END, });

static const sl_cli_command_info_t cmd__echointstr = \
  SL_CLI_COMMAND(echo_intstr,
                 "echoes integer and string arguments to the output",
                 "Just a number..." SL_CLI_UNIT_SEPARATOR
                 "Just a string..."
                 {SL_CLI_ARG_INT8, SL_CLI_ARG_STRING, SL_CLI_ARG_END, });

// Create command handlers for the commands
void echo_str(sl_cli_command_arg_t *arguments)
{
  char *ptr_string;

  for (int i = 0; i < sl_cli_get_argument_count(arguments); i++) {
    ptr_string = sl_cli_get_argument_string(arguments, i);
  }
}

void echo_int(sl_cli_command_arg_t *arguments)
{
  int8_t argument_value;

  for (int i = 0; i < sl_cli_get_argument_count(arguments); i++) {
    argument_value = sl_cli_get_argument_int8(arguments, i);
  }
}

void echo_intstr(sl_cli_command_arg_t *arguments)
{
  int8_t argument_value;
  char *ptr_string;

  argument_value = sl_cli_get_argument_int8(arguments, 0);
  ptr_string = sl_cli_get_argument_string(arguments, 1);
  ...
}

// And finally call the function to install the commands.
  status = sl_cli_command_add_command_group(cli_handle, &a_group_0);
